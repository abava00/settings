"plugins
source $HOME\vimfiles\vundlerc
"setting
" 256色
set t_Co=256
"ターミナルでも256色使えるようにする
set termguicolors
"なにこれ
au ColorScheme * hi Normal ctermbg=none
set background=dark

"文字コード変換
set encoding=utf-8
"gvimの文字化けを直したい
"まあ上の utf-8を消せばいいだけなんだけどさ
source $VIMRUNTIME/delmenu.vim
set langmenu=ja_jp.utf-8
source $VIMRUNTIME/menu.vim
" 編集中のファイルが変更されたら自動で読み直す
set autoread
" バックアップファイルを作らない
set nobackup
" スワップファイルを作らない
set noswapfile
" バッファが編集中でもその他のファイルを開けるように
set hidden
" 入力中のコマンドをステータスに表示する
set showcmd
"作業ディレクトリの自動移動
set autochdir
"クリップボードの有効化
set clipboard+=unnamed,autoselect
"前回編集箇所から再開する
augroup vimrcEx
  au BufRead * if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" | endif
    augroup END
"jjでescを行うようにする
inoremap <silent>jj <ESC>
"画面の移動
nnoremap <Space>w <C-w><C-w>
"全て選択する
nnoremap <Space>a ggVG
"バッファ入れ替え
nnoremap <Space>bb :b
"バッファ削除
nnoremap <Space>bd :bd!<CR>
"バッファ移動
nnoremap <silent><A-j> :bn<CR>
nnoremap <silent><A-k> :bp<CR>
"vimrc の再起動
nnoremap <Space>, :source $MYVIMRC<CR>
"別バッファにターミナルを起動
nnoremap <Space>bt :ene<CR>:terminal Powershell<CR><C-w><C-w>:q<CR><C-\><C-n>:bp<CR>:bd<CR>
"terminalでESCを押すとnormalモードになる
tnoremap <ESC> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>
tnoremap <silent>jj <C-\><C-n>
"単語関係の処理
cnoremap <Space>d diw
nnoremap <Space>c ciw
nnoremap <Space>y yiw
nnoremap <Space>v yiw
"shift押すの面倒なの
nnoremap ci2 ci"
nnoremap di2 di"
nnoremap yi2 yi"
nnoremap ci7 ci'
nnoremap di7 di'
nnoremap yi7 yi'
nnoremap ci8 ci(
nnoremap di8 di(
nnoremap yi8 yi(
nnoremap ci9 ci)
nnoremap di9 di)
nnoremap yi9 yi)
"サラウンド.vim のコマンドが覚えられないので
nnoremap s <Nop>
nnoremap s" viw<ESC>bi"<ESC>ea"<ESC>
nnoremap s2 viw<ESC>bi"<ESC>ea"<ESC>
nnoremap s' viw<ESC>bi'<ESC>ea'<ESC>
nnoremap s7 viw<ESC>bi'<ESC>ea'<ESC>
nnoremap s( viw<ESC>bi(<ESC>ea)<ESC>
nnoremap s8 viw<ESC>bi(<ESC>ea)<ESC>
nnoremap s) viw<ESC>bi(<ESC>ea)<ESC>
nnoremap s9 viw<ESC>bi(<ESC>ea)<ESC>

"見た目系
" 行番号を表示
set number
"行番号をF12で絶対表示と相対表示に切り替える 重くなるかもしれない
nnoremap <F12> :set relativenumber!<CR>
"現在の行を強調表示 重くなるかもしれない
set cursorline
" 現在の列を強調表示
"set cursorcolumn
" 行末の1文字先までカーソルを移動できるように
set virtualedit=onemore
" インデントはスマートインデント
set smartindent
" ビープ音を可視化
"set visualbell
"ビープいらんでしょ
set belloff=all
" 括弧入力時の対応する括弧を協調表示
set showmatch
" ステータスラインを常に表示
set laststatus=2
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
noremap k gk
" シンタックスハイライトの有効化
syntax enable
"￥を/に自動へんかんする
set shellslash
"vimのコマンドを見やすく
set wildmenu
"Tabを押すとファイル名前が補完できる :e [name]とかで
set wildmode=list,full
"補完してみようぜ的な？
set completeopt=menuone
for k in split("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",'\zs')
  exec "imap <expr> " . k . " pumvisible() ? '" . k . "' : '" . k . "\<C-X>\<C-P>\<C-N>'"
endfor
"ターミナルを起動させる(Powershell) 横
noremap <Space>t  :bo terminal! ++rows=15 ++close Powershell<CR>
"ターミナルを起動させる<(Powershell)縦
noremap <Space>r  :vertical botright terminal! ++close Powershell<CR>
" Tab系
" 不可視文字を可視化(タブが「?-」と表示される)
set list listchars=tab:\?\-
" Tab文字を半角スペースにする
set expandtab
" 行頭以外のTab文字の表示幅（スペースいくつ分）
set tabstop=2
" 行頭でのTab文字の表示幅
set shiftwidth=2
"バックスペース系のあれこれ
"indent:オートオンデマンド機能によって挿入されたスペースを消せる(?)
"start:Insertに入ったときより前の文字を消せるようになる
"eol:改行文字を消せる
set backspace=indent,eol,start

""複数のタブとしてテキストを表示""""""""""""""""""""""""""""""""""
"" Anywhere SID
"function! s:SID_PREFIX()
"  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
"endfunction
"
"" Set tabline.
"function! s:my_tabline()  "{{{
"  let s = ''
"  for i in range(1, tabpagenr('$'))
"    let bufnrs = tabpagebuflist(i)
"    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
"    let no = i  " display 0-origin tabpagenr.
"    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
"    let title = fnamemodify(bufname(bufnr), ':t')
"    let title = '[' . title . ']'
"    let s .= '%'.i.'T'
"    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
"    let s .= no . ':' . title
"    let s .= mod
"    let s .= '%#TabLineFill# '
"  endfor
"  let s .= '%#TabLineFill#%T%=%#TabLine#'
"  return s
"endfunction "}}}
"let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
"set showtabline=2 " 常にタブラインを表示
"
"" The prefix key.
"nnoremap    [Tag]   <Nop>
"nmap    t [Tag]
"" Tab jump
"for n in range(1, 9)
"  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
"endfor
"" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ
"
"map <silent> [Tag]c :tablast <bar> tabnew<CR>
"" tc 新しいタブを一番右に作る
"map <silent> [Tag]x :tabclose<CR>
"" tx タブを閉じる
"map <silent> [Tag]n :tabnext<CR>
"" tn 次のタブ
"map <silent> [Tag]p :tabprevious<CR>
"" tp 前のタブ
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" 検索系
" 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
" 検索文字列入力時に順次対象文字列にヒットさせる
set incsearch
" 検索時に最後まで行ったら最初に戻る
set wrapscan
" 検索語をハイライト表示
set hlsearch
" ESC連打でハイライト解除
nmap <Esc><Esc> :nohlsearch<CR><Esc>

"TeXの設定
"set concealcursor=""
"let g:tex_flavor='platex'
"let g:vimtex_view_method='general'
"let g:vimtex_quickfix_mode=0
"set conceallevel=1
"let g:tex_conceal='abdmg'
"let g:tex_conceal='a'

"vim-airlineの設定
" Powerline系フォントを利用する
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'tomorrow'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
"" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''


"テーマ
"colorscheme hybrid
"colorscheme dogrun
colorscheme koehler

"ファイルタイプに基づいたインデントを有効化(試験的導入 どう動くんだろう)
filetype plugin indent on
"永続undo有効化,ファイルごとにundodirを生成する(試験的導入)
set undofile
if !isdirectory(expand("$HOME\\vimfiles\\undodir"))
  call mkdir(expand("$HOME\\vimfiles\\undodir"),"p")
endif
set undodir=$HOME\\vimfiles\\undodir
"コードの畳み込み(試験的導入)
set foldmethod=indent
nnoremap zC zM "全部畳み込む
nnoremap zX zR "全部展開
autocmd BufRead * normal zR "ファイルと開いたときに全て展開される
